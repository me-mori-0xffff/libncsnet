.\" Copyright (c) 2024, oldteam. All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright notice, this
.\"    list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright notice,
.\"    this list of conditions and the following disclaimer in the documentation
.\"    and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
.\" ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
.\" SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.TH BUILD 7 "20 Aug 2024"
.SH NAME
build - концепция building-а пакетов в libncsnet.
.SH DESCRIPTION
Почти в каждом заголовочном файле посвященному протоколу в \fIncsnet/\fR можно найти функции типа:
.IP
\fBu8 *\fIudp_build\fB(\fI...\fB);\fR
.PP
которые служат для создания пакета подлежащего протокола согласуясь с аргументами.
.SS Стандарт названия
Каждая из таких функций имеет название соответствующее этому шаблону:
.IP
.nf
<\fIproto\fR>{ver}{\fB(_)\fRtype}\fB(_build)\fR[\fI(_)tag\fR]
.PP
синтаксис:
  <переменная> - обязательная переменная;
  [перменная]  - возможная переменная;
  (константа)  - явно установленная переменная, и не изменяемая;
  {переменная} - если есть что подставить, то перменная обязательная;
.PP
значения:
  proto        - протокол;
  ver          - версия протокола;
  type         - привходящий элемент протокола;
  tag          - если вместе с создаваемым элементом протокола создается что то еще,
                 то можно тут это обозначить, например, если с созданием tcp кадра,
                 создается еще ip, то можно поставить tag=pkt (поскольку создается полно
                 ценный пакет);

.fi
.PP
.nf
u8 *udp_build(u16 srcport, u16 dstport, u8 *frame, size_t frmlen, size_t *pktlen);
u8 *udp4_build_pkt(const u32 src, const u32 dst, int ttl, u16 ipid, u8 tos,
                   u16 off, u8 *ipopt, int ipoptlen, u16 srcport, u16 dstport,
                   u8 *frame, size_t frmlen, size_t *pktlen, bool badsum);
u8 *sctp_chunk_build(u8 type, u8 flags, u8 *value, size_t valuelen, size_t *chunklen);
.fi
.PP
.SS Стандарт аргументов
Аргументы у каждой из подобных функций могут/должны насчитывать эти:
.PP
.nf
  <<\fItype\fR>\fB(len)\fR>  - размер кадра который был создан. Для предствления этого
                               аргумента можно использовать указатель на целочисленную
                               переменную size_t. В качестве type, выступает
                               элемент который создается.

  {\fB(frame)\fR}            - кадр который нужно будет добавить к созданному в конец.
                               Для представления первого можно использовать указатель типа unsigned char,

  {\fB(frmlen)\fR}           - размер добавляемого кадра. Для представления можно использовать перменную size_t.
.fi
.PP
Такой набор аргументов позволяет проектировать иерархичное создание пакета, например,
.nf
.ft B
    size_t tcplen, iplen, ethlen;
    u8 *tcp, *ip, *eth;

    /* создаем tcp кадр, сохраняем его в tcp, а размер в tcplen */
    tcp=tcp_build(..., &tcplen)

    /*
     * создаем ip кадр, к которому в конец добавляем tcp кадр, который
     * создали выше. И на выходе получаем такой кадр:
     *   ip + tcp
     */
    ip=ip_build(..., tcp, tcplen, &iplen)

    /*
     * создаем ethernet 2 кадр, к которому в конец добавляем ip кадр с tcp, который
     * создали выше. И на выходе получаем такой кадр:
     *   eth + ip + tcp
     */
    eth=eth_build(..., ip, iplen, &ethlen)
.ft
.fi
.PP
Таким образом мы постепенно создали полноценный пакет,
который соответствует критериям для отправки, процесс выглядел так:
.IP
.nf
1. создали tcp;
2. создали ip, добавили к нему tcp созданный ранее;
3. создали eth, добавили к нему ip с tcp созданный ранее.
.fi
.SS Другие требования к build функциям
.nf
\fB1.\fR Максимально полноценный и при этом гибкий набор аргументов.
\fB2.\fR Отсутствие расчета контрольных сумм в функциях где отсутстствует \fI<tag>\fR.
\fB3.\fR Кадр должен возвращатся функцией в \fBunsigned char *\fR с выделенной под него памятью самой функцией,
а не записываться в буфер через аргументы.
.fi

